// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  username         String?   @unique
  name             String?
  password         String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  bio              String?   @db.Text
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  sessions         Session[]
  recommendedBooks Books[]
  Reviews          Reviews[]
  Lists            Lists[]

  @@unique([id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Books {
  id                Int            @id @default(autoincrement())
  title             String         @db.VarChar(255)
  description       String         @db.Text
  authorId          Int
  author            Authors        @relation(fields: [authorId], references: [id])
  lang              Lang           @default(English)
  availability      Json?          @default("[]")
  status            Status         @default(Ongoing)
  publishedYear     Int?           @db.Year
  publishedPlatform String?        @db.VarChar(255)
  parts             Int?
  cover             String?        @db.VarChar(255)
  ebook             String?        @db.VarChar(255)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  assignedToUserId  String?        @db.VarChar(255)
  assignedToUser    User?          @relation(fields: [assignedToUserId], references: [id])
  Reviews           Reviews[]
  Lists             Lists[]
  CategoryList      CategoryList[]

  @@unique([id])
}

model CategoryList {
  book       Books      @relation(fields: [bookId], references: [id])
  bookId     Int
  categoryId Int
  category   Categories @relation(fields: [categoryId], references: [id])

  @@id([bookId, categoryId])
}

model Lists {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  book     Books? @relation(fields: [bookId], references: [id])
  userId   String
  bookId   Int?
  listType String // plan_to_read, currently_reading, finished_reading

  @@unique([userId, bookId, listType], name: "UniqueBookPerUserAndListType")
}

model Reviews {
  id        Int      @id @default(autoincrement())
  rating    Int
  content   String   @db.Text
  bookId    Int
  book      Books    @relation(fields: [bookId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categories {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  createdAt    DateTime       @default(now())
  CategoryList CategoryList[]

  @@unique([id, name])
}

model Authors {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  about     String?  @db.Text
  createdAt DateTime @default(now())
  Books     Books[]

  @@unique([id, name])
}

enum Status {
  Ongoing
  Completed
}

enum Lang {
  English
  Burmese
  Korean
  Chinese
  Japanese
}
